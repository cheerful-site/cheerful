<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.korit.cheerful_back.domain.community.CommunityMapper">
    <resultMap id="CommunityMap" type="com.korit.cheerful_back.domain.community.Community">
        <id property="communityId" column="community_id" />
        <result property="communityCategoryId" column="community_category_id" />
        <result property="userId" column="ct_user_id" />
        <result property="title" column="community_title" />
        <result property="content" column="community_content" />
        <result property="createdAt" column="created_at" />
        <result property="isLike" column="is_like" />
        <result property="likeCount" column="like_count" />
        <result property="commentCount" column="comments_count" />
        <association property="user" resultMap="UserMap" />
        <association property="communityCategory" resultMap="CommunityCategoryMap" />
        <collection property="communityImgs" javaType="list" resultMap="CommunityImgMap" />
    </resultMap>

    <resultMap id="UserMap" type="com.korit.cheerful_back.domain.user.User">
        <id     property="userId" column="ut_user_id"/>
        <result property="username" column="user_name"/>
        <result property="email" column="user_email" />
        <result property="profileImgPath" column="profile_img_path"/>
        <result property="role" column="role" />
        <result property="provider" column="provider" />
        <result property="providerId" column="provider_id" />
    </resultMap>

    <resultMap id="CommunityCategoryMap" type="com.korit.cheerful_back.domain.communityCategory.CommunityCategory">
        <id property="communityCategoryId" column="community_category_id" />
        <result property="communityCategoryName" column="community_category_name" />
    </resultMap>

    <resultMap id="CommunityImgMap" type="com.korit.cheerful_back.domain.communityImg.CommunityImg">
        <id property="communityImgId" column="community_img_id" />
        <result property="communityId" column="cit_community_id" />
        <result property="seq" column="seq" />
        <result property="imgPath" column="img_path" />
    </resultMap>

    <insert id="insert" useGeneratedKeys="true" keyProperty="communityId">
        insert into community_tb
        values (default, #{communityCategoryId}, #{userId}, #{title}, #{content}, now())
    </insert>

    <select id="findAllBySearchOption" resultMap="CommunityMap">
        select
            *
        from
            (select
                dense_rank() over(order by ct.created_at desc, ct.community_id desc) as community_number,
                ct.community_id,
                ct.community_category_id,
                ct.user_id as ct_user_id,

                ut.user_id as ut_user_id,
                ut.user_name,
                ut.user_email,
                ut.profile_img_path,
                ut.role,
                ut.provider,
                ut.provider_id,

                ct.community_title,
                ct.community_content,
                ct.created_at,

                cit.community_img_id,
                cit.community_id as cit_community_id,
                cit.seq,
                cit.`img_path`,

                ifnull(clt.community_like_id, 0) as is_like,
                ifnull(clc.like_count, 0) as like_count,
                ifnull(cc.comments_count, 0) as comments_count
        from
            community_tb ct
            left outer join user_tb ut on(ut.user_id = ct.user_id)
            left outer join community_img_tb cit on(cit.community_id = ct.community_id)
            left outer join community_like_tb clt on(clt.community_id = ct.community_id and clt.user_id = #{userId})
            left outer join (select community_id, count(*) as like_count from community_like_tb group by community_id) clc on(clc.community_id = ct.community_id)
            left outer join (select community_id, count(*) as comments_count from community_comment_tb group by community_id) cc on(cc.community_id = ct.community_id)
        where
            ct.user_id = #{userId}
        order by
            ct.created_at desc,
            ct.community_id desc,
            cit.seq) communities
        where
            community_number between #{startIndex} + 1 and #{endIndex}
    </select>

    <select id="findByCategoryId" resultMap="CommunityMap">
        select
            ct.community_id,
            ct.community_category_id,
            ct.user_id as ct_user_id,

            ut.user_id as ut_user_id,
            ut.user_name,
            ut.user_email,
            ut.profile_img_path,
            ut.role,
            ut.provider,
            ut.provider_id,

            ct.community_title,
            ct.community_content,
            ct.created_at,

            cit.community_img_id,
            cit.community_id as cit_community_id,
            cit.seq,
            cit.`img_path`,

            ifnull(clt.community_like_id, 0) as is_like,
            ifnull(clc.like_count, 0) as like_count,
            ifnull(cc.comments_count, 0) as comments_count
        from
            community_tb ct
            left outer join user_tb ut on(ut.user_id = ct.user_id)
            left outer join community_img_tb cit on(cit.community_id = ct.community_id)
            left outer join community_like_tb clt on(clt.community_id = ct.community_id and clt.user_id = #{userId})
            left outer join (select community_id, count(*) as like_count from community_like_tb group by community_id) clc on(clc.community_id = ct.community_id)
            left outer join (select community_id, count(*) as comments_count from community_comment_tb group by community_id) cc on(cc.community_id = ct.community_id)
        <where>
            <choose>
                <!-- categoryId == 1 이면 전체 -->
                <when test="categoryId == 1">
                    1 = 1
                </when>
                <otherwise>
                    ct.community_category_id = #{categoryId}
                </otherwise>
            </choose>
        </where>
        order by ct.community_id desc;
    </select>

    <select id="getCountOfOptions" resultType="java.lang.Integer">
        select
            count(*)
        from
            community_tb ct
        where
            ct.user_id = #{userId}
    </select>
</mapper>