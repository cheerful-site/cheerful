<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.korit.cheerful_back.domain.notice.NoticeMapper">
    <resultMap id="NoticeMap" type="com.korit.cheerful_back.domain.notice.Notice">
        <id property="noticeId" column="notice_id" />
        <result property="userId" column="user_id"/>
        <result property="noticeCategoryId" column="notice_category_id"/>
        <result property="title" column="notice_title"/>
        <result property="content" column="notice_content"/>
        <result property="createdAt" column="created_at"/>
        <result property="views" column="notice_views"/>
        <result property="isLike" column="is_like" />
        <result property="likeCount" column="like_count" />
        <association property="user" resultMap="UserMap" />
        <association property="noticeCategory" resultMap="NoticeCategoryMap" />
        <collection property="noticeImgs" javaType="list" resultMap="NoticeImgMap" />
    </resultMap>

    <resultMap id="UserMap" type="com.korit.cheerful_back.domain.user.User">
        <id property="userId" column="user_id"/>
        <result property="username" column="username"/>
        <result property="password" column="password"/>
        <result property="name" column="name"/>
        <result property="email" column="email"/>
        <result property="profileImgPath" column="profile_img_path"/>
        <result property="role" column="role"/>
        <result property="provider" column="provider"/>
        <result property="providerId" column="provider_id"/>
        <result property="createdAt" column="created_at" />
    </resultMap>

    <resultMap id="NoticeCategoryMap" type="com.korit.cheerful_back.domain.noticeCategory.NoticeCategory">
        <id property="noticeCategoryId" column="notice_category_id" />
        <result property="noticeCategoryName" column="notice_category_name" />
    </resultMap>

    <resultMap id="NoticeImgMap" type="com.korit.cheerful_back.domain.noticeImg.NoticeImg">
        <id property="noticeImgId" column="notice_img_id" />
        <result property="noticeId" column="notice_id" />
        <result property="seq" column="seq" />
        <result property="imgPath" column="img_path" />
    </resultMap>

    <insert id="insert">
        insert into
            notice_tb(notice_id, user_id, notice_category_id, notice_title, notice_content, created_at)
        values (default, #{userId}, #{noticeCategoryId}, #{title}, #{content}, now())
    </insert>

    <select id="findAllBySearchOptions" resultMap="NoticeMap">
        select
            *
        from
            (select
                dense_rank() over(order by nt.created_at desc, nt.notice_id desc) as notice_number,
                nt.notice_id,
                nt.user_id as nt_user_id,
                nt.notice_category_id,
                nt.notice_title,
                nt.notice_content,
                nt.created_at,
                nt.notice_views,

                nct.notice_category_name,

                ut.user_id,
                ut.username,
                ut.password,
                ut.name,
                ut.email,
                ut.profile_img_path,
                ut.role,
                ut.provider,
                ut.provider_id,
                ut.created_at as ut_created_at,

                nit.notice_img_id,
                nit.notice_id as nit_notice_id,
                nit.seq,
                nit.`img_path`,

                ifnull(nlt.notice_like_id, 0) as is_like,
                ifnull(nlc.like_count, 0) as like_count
            from
                notice_tb nt
                left outer join user_tb ut on(ut.user_id = nt.user_id)
                left outer join notice_img_tb nit on(nit.notice_id = nt.notice_id)
                left outer join notice_like_tb nlt on(nlt.notice_id = nt.notice_id)
                left outer join notice_category_tb nct on(nct.notice_category_id = nt.notice_category_id)
                left outer join (select notice_id, count(*) as like_count from notice_like_tb group by notice_id) nlc on(nlc.notice_id = nt.notice_id)
            where
                nt.notice_category_id = #{noticeCategoryId}
            order by
                nt.created_at desc,
                nt.notice_id desc,
                nit.seq) communities
        where
            notice_number between #{startIndex} + 1 and #{endIndex}
    </select>

<!--    <update id="increaseViews"></update>-->

<!--    <update id="update"></update>-->

<!--    <delete id="deleteByNoticeIds"></delete>-->

<!--    <select id="selectViews" resultType="java.lang.Integer"></select>-->



    <select id="getCountOfOptions" resultType="java.lang.Integer">
        select
            count(*)
        from
            notice_tb nt
            left outer join notice_category_tb nct on(nct.notice_category_id = nt.notice_category_id)
        <where>
            <choose>
                <!-- categoryId == 1 이면 전체 -->
                <when test="categoryId == 1">
                    1 = 1
                </when>
                <otherwise>
                    nt.notice_category_id = #{noticeCategoryId}
                </otherwise>
            </choose>
        </where>
    </select>

</mapper>